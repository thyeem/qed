#!/bin/bash

# Prerequisite ----------------------------------------
# $ brew install zbar qrencode imagemagick ffmpeg

# Edit-Zone -------------------------------------------

# hasher binary
HASHER=sha256sum

# default minimum of QR-version: an integer between 1 and 40
QR_VERSION=40

# default QR-error-correction-level: one of [L,M,Q,H]
QR_ERROR_CORRECTION=L

# default QR-cell size
QR_CELL_SIZE=13

# default cell margin in QR Code area
QR_MARGIN=24

# default foreground-color of QR Code [6-hexadecimal]
QR_FOREGROUND="000000"

# default background-color of QR Code [6-hexadecimal]
QR_BACKGROUND="ffffff"

# default maximum box-size when resizing QR Code image
QR_RESIZE_BOX_SIZE=720

# default framerate when playing slideshow
SLIDE_SHOW_FRAMERATE=1


# Header Definition ---------------------------------------------------

# the header bytes are to provide some information when decoded.
#
# header(HEADER_BYTES) := [hash:HASH_ID_BYTES]
#                       + [index:INDEX_BYTES]
#                       + [size:INDEX_BYTES]

HASH_ID_BYTES=8

INDEX_BYTES=3

HEADER_BYTES=$(($HASH_ID_BYTES + ${INDEX_BYTES}*2))

# 'capcode' or Capaicty-Code means the amount of data can be stored.
# This consists of version, error correction level and the data type
#
# capcode = [version:2-byte]
#         + [error-coorection-level:1-byte]
#         + [datatype:1-byte]  (fixed to binary)
#
# error-correction-level: one of [L,M,Q,H]
# version of QR code: 1 to 40 (padded two-digit, %02d)
# datatype: others are not very useful, so it was fixed as binary

# ---------------------------------------------------------------------

stderr-msg () {
    # -> stderr messages
    # <- $@: all messages passed
    if [[ -n $verbose || $1 -gt 0 ]]; then
        shift
        >&2 echo
        >&2 echo -e "$@" "\t"
    fi
}


error () {
    # -> exit status
    # <- $@: all messages passed
    stderr-msg 1 $(red error) "\t" $@
    exit 1
}


warning () {
    # -> exit status
    # <- $@: all messages passed
    stderr-msg 1 $(magenta warning) "\t" $@
    return 1
}


red () {
    # -> ansi-escaped text
    # <- $1: text to colorize red
    echo -e "\033[0;31m$1\033[0m"
}


green () {
    # -> ansi-escaped text
    # <- $1: text to colorize green
    echo -e "\033[0;32m$1\033[0m"
}


magenta () {

    # -> ansi-escaped text
    # <- $1: text to colorize magenta
    echo -e "\033[0;35m$1\033[0m"
}


abspath () {
    # -> absolute path
    # <- $1: filepath
    local dir=$(cd $(dirname $1); pwd -P)
    local fname=$(basename $1)
    if [[ "$fname" == "." ]]; then
        echo -n "$dir"
    else
        echo -n "$dir/$fname"
    fi
}


lower () {
    # -> lowercase string
    # <- $1: string to convert
    echo -n "$1" | perl -ne 'print lc'
}


upper () {
    # -> uppercase string
    # <- $1: string to convert
    echo -n "$1" | perl -ne 'print uc'
}


hash-id () {
    # -- get a hash value using a given hasher
    #
    # -> sized hex-string
    # <- $1: filepath - if not provided, use stdin
    if [ $# -gt 0 ]; then
        # when used with args: hash-id STRING
        echo -n $($HASHER "$1" | head -c $HASH_ID_BYTES)
    else
        # when used with stdin: cat FILE | hash-id
        echo -n $(cat - | $HASHER | head -c $HASH_ID_BYTES)
    fi
}


random-bytes () {
    echo -n $(cat /dev/urandom | head -c 32)
}


tmp-filepath () {
    # -> tmp filepath string
    echo -n "/tmp/$(random-bytes | $HASHER | head -c 16)"
}


assert-dir () {
    # -> void
    # <- $1: filepath
    rm -rf $1; mkdir -p $1
}


assert-file () {
    # -> void
    # <- $1: filepath
    rm -rf $1; :> $1
}


are-you-sure () {
    # -> exit status
    # <- $1: filepath
    if [ -e "$1" ]; then
        >&2 echo
        read -n 1 -rp "$2 [y/N] " < /dev/tty
        >&2 echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            return 0
        else
            exit 1
        fi
    else
        return 0
    fi
}


ask-for-deletion () {
    # -> filepath | exit status
    # <- $1: filepath
    local o=$(abspath $1)
    are-you-sure "$o" "Attempting to overwrite an existing $o. Are you sure?"  \
        && are-you-sure "$o" "Irrevisible action. Are you sure to delete $o?"  \
        && rm -rf $o
    echo $o
}


decimal-to-binary () {
    # -> binary-form string
    # <- $1: decimal-form string
    # <- $2: (optional) size of output. if not provided, use the minimum length
    local n=$1
    local size=$2
    if [ -z $size ]; then
        while true; do
            size=$((size + 1))
            [[ $n -lt $((2 ** $size)) ]] && break
        done
    fi

    local r=
    for _ in $(seq $size); do
        b="$b$(echo -n $(($n & 1)))"
        ((n >>= 1))
    done
    echo -n $b | rev
}


find-max-qr-encoding-byte () {
    # -- find maximum bytes that can be encoded with the given capcode
    # --
    # -> max-QR-storage-byte number
    # <- $1: capcode
    local filter="${1:0:2}_${1:2:1}"
    grep -A 1 "^__QR_MAX_BYTES_DEF__$" $0 | tail -1             \
                                          | base64 -d           \
                                          | gunzip -c           \
                                          | grep "$filter"      \
                                          | awk -F: '{print$2}' \
        || error "problems finding QR Code max-encoding bytes: $filter"
}


split-data () {
    # -- split the given buffer if large enough
    #
    # -> void
    # <- $1: in
    # <- $2: bytes
    # <- $3: prefix
    split -b $(($2 - $HEADER_BYTES)) -a $INDEX_BYTES "$1" "$3" \
        || error "occurred problem while splitting data in: $(pwd)"
}


write-header-and-qrencode () {
    # -- write a header to each token and encode it into a QR Code
    #
    # -> void
    # <- $1: bytes
    # <- $2: hash
    # <- $3: size
    # <- $4: margin
    # <- $5: version
    # <- $6: level
    # <- $7: fcolor
    # <- $8: bcolor
    stderr-msg 0 -n "."
    local total=$(printf %0${INDEX_BYTES}d $(ls -1 _ | wc -l))
    local it=1
    for f in $(ls -1 _ | sort); do
        local o="$f.png"
        local header="$2$(printf %0${INDEX_BYTES}d $it)$total"
        stderr-msg 0 -n "processing  $2" \
                        "[$(printf %0${INDEX_BYTES}d $it) / $total]  >>  $(pwd)/$o"

        # write header to split file
        echo -n $header | cat - "_/$f" | head -c $1 > _/_ && mv _/_ "_/$f" \
            || error "occurred problem while writing header: $header"

        # encode each split file into QR Code
        cat "_/$f" | $(which qrencode) -8               \
                                       -s $3            \
                                       -m $4            \
                                       -v $5            \
                                       -l $6            \
                                       -o $o            \
                                       --foreground=$7  \
                                       --background=$8  \
            || error "occurred problem while encoding data into QR Code: $(pwd)/$f"
        it=$((it+1))
    done
    rm -rf _
}


get-images-from-dir () {
    # -> filepath of images
    # <- $1: directory
    find $1 | file --mime -f -     \
            | grep "image/*"       \
            | awk -F: '{print$1}'  \
            | grep -v -w __        \
            | grep -v -w _         \
            | sort
}


check-if-video () {
    # -> result string
    # <- $1: filepath
    file --mime $1       \
        | grep "video/*" \
        | awk -F: '{print$1}'
}


create-video () {
    # -> void
    # <- $1: video-file-basename
    local mp4="$1.mp4"
    local n=$(ls -1 *.png | wc -l)
    local t=$(echo "scale=0;$n/$framerate+3" | bc)
    local stats=
    [[ -n $verbose ]] && stats="-stats"

    # converting encoded images into video file
    $(which ffmpeg) -y -hide_banner     \
                    -loglevel error     \
                    -stream_loop -1     \
                    -r $framerate       \
                    -t $t               \
                    -pattern_type glob  \
                    -i '*.png'          \
                    -s hd720            \
                    $stats              \
                    $mp4                \
        || error "occurred problem while creating the slideshow: $mp4"
    echo $mp4
}


create-quick-view () {
    # -> void
    # <- $1: html-file-basename
    local html="$1.html"
    echo -e "<!DOCTYPE html>" > $html
    echo -e "<head><title>qed-encoded</title></head>" >> $html
    echo -e "<body><center>" >> $html
    for f in $(ls -1 | sort); do
        echo -e "<img src=\"$(abspath $f)\" width="720">" >> $html
    done
    echo -e "</center></body><html>" >> $html
    echo $html
}


encode () {
    # -- the outermost encoding wrapper function
    # -- single encoding process is performed for a given file
    #
    # -> tar-stream | filepath
    # <- $1: out
    # <- $2: in
    # <- $3: size
    # <- $4: margin
    # <- $5: version
    # <- $6: level
    # <- $7: fcolor
    # <- $8: bcolor

    # get capcode or capaicty-code, meaning the amount of data can be stored.
    local capcode="$(printf %02d $version)$level"

    # get maximum bytes that can be encoded with the given capcode
    local bytes=$(find-max-qr-encoding-byte $capcode)

    # guard on 'bytes' variable
    [[ -n $bytes ]] || \
        error "failed to get QR-max-encoding-byte." \
              "\n\t check if the values of -l and -V are set correctly."

    # tmp working directory
    local t=$(tmp-filepath)
    assert-dir "$t/_"
    cd $t

    # get a hash-id-key for data
    local hash=$(hash-id $2)
    [[ ${#hash} -eq $HASH_ID_BYTES ]] \
        || error "something wrong with hash-id value: $hash"

    # split the given buffer if it is large enough
    split-data "$2" $bytes "$t/_/$hash-"

    # try QR-encoding with the generated header
    write-header-and-qrencode $bytes \
                              $hash  \
                              $3     \
                              $4     \
                              $5     \
                              $6     \
                              $7     \
                              $8

    stderr-msg 0 "completed.  each QR Code encoded in:" \
                 "$bytes bytes (including ${HEADER_BYTES}-byte header)\n"

    # quick-view encoded images (if -q is set)
    [[ -n $view ]] && create-quick-view "$t-$capcode"

    # play slideshow after generating video from images (if -p is set)
    [[ -n $slideshow ]] && create-video "$t-$capcode"

    # if quick-view or slideshow then exit
    [[ -n $view || -n $slideshow ]] && exit 0

    # output: write to file or to stdout in tar format
    if [ -n "$1" ]; then
        ls -1 *.png | tar -cf "$1" -T - \
            && echo "$1" \
            || error "occurred problem while writing to file: $1"
    else
        ls -1 *.png | tar -c -T - \
            || error "occurred problem while writing to stdout"
    fi
    rm -rf $t
}


video-to-images () {
    # -> filepath of the converted images
    # <- $1: video file
    local t=$(tmp-filepath)
    local stats=
    mkdir -p $t
    [[ -n $verbose ]] && stats="-stats"
    $(which ffmpeg) -y -hide_banner       \
                    -loglevel error       \
                    -i "$1"               \
                    -vf "fps=$framerate"  \
                    $stats                \
                    $t/%4d.png            \
        || error "occurred problem while converting the video: $1"
    echo $t
}

decode-qrcode-image () {
    # -> void
    # <- $1: qrcode image file
    # <- $2: dirname where decoded files are collected
    # <- $3: max-box-size of QR code image
    rm -f _ __

    # resize
    $(which convert) -resize "${3}x${3}>" $1 __                              \
        || warning "failed to resize QR image: $(pwd)/$(basename $1), skip"  \
        || return 0

    # decode each iamge using zbar
    $(which zbarimg) --raw --quiet -Sbinary __ > _                           \
        || warning "failed to decode QR image: $(pwd)/$(basename $1), skip"  \
        || return 0

    # parse header
    local header=$(cat _ | head -c $HEADER_BYTES)
    [[ ${#header} -eq $HEADER_BYTES ]]                                       \
        || warning "wrong header: $header in $(pwd)/$(basename $1), skip"    \
        || return 0

    stderr-msg 0 -n                                                          \
                 "processing  ${header:0:$HASH_ID_BYTES}"                    \
                 "[${header:$HASH_ID_BYTES:$INDEX_BYTES}"                    \
                 "/"                                                         \
                 "${header:$((HEADER_BYTES-$INDEX_BYTES)):$INDEX_BYTES}]"    \
                 " << "                                                      \
                 "$(pwd)/$(basename $1)"
    cat _ | tail -c +$((HEADER_BYTES + 1)) > "$2/$header"
    rm -f _ __
}


find-hashes-of-uniq-files () {
    # -> many hash strings (blank separated)
    # no input.
    # the ouput depends on the directory where this function is called.
    local awk=`echo {print substr\(\\$0,3,$HASH_ID_BYTES\)}`
    echo -n $(find . -size +0c | awk "$awk" | sort | uniq)
}


merge-and-verify-decoded-files () {
    # -> void
    # <- $1: filepath of merged files
    # <- $2: hash
    local f="$1/$2"
    ls -1 | grep $2 | sort | xargs cat > $f \
        || error "occurred problem during merging decoded files: $f"

    # check if the merged file is valid
    local got=$(cat $f | hash-id)
    if [ "$2" != "$got" ]; then
        tar -tf $f &>/dev/null \
            || error "not matched hash value of file: $f" \
                     "\n\t expected $2, but got $got"

        warning "still looks like a vaild: $f" \
                "\n\t\t be aware that the hash is different from the original." \
                "\n\t\t expected $2, but got $got" \
            || return 0
    fi
}


decode () {
    # -- the outermost decoding wrapper function
    # -> file-stream | filepath
    # <- $1: out: output tarball filepath
    # <- $2: directory containing images to be decoded

    stderr-msg 0 -n "."
    cd "$2"

    # where decoded files are collected
    local decoded="$(tmp-filepath)"
    assert-dir "$decoded"

    # decoding from images
    for f in $(get-images-from-dir .); do
        decode-qrcode-image $f $decoded $QR_RESIZE_BOX_SIZE \
            || error "failed to decode QR code image: $f"
    done

    cd "$decoded"

    # merge files
    local merged=$(tmp-filepath)
    assert-dir $merged
    for hash in $(find-hashes-of-uniq-files); do
        merge-and-verify-decoded-files $merged $hash \
            || error "failed to merge files with expected hash of: $hash"
    done

    cd "$merged"

    # extract decoded archives
    for f in *; do
        tar -xf $f \
            || error "failed to extract decoded archive: $f"
        rm -f $f
    done

    # output
    stderr-msg 0
    if [ -n "$1" ]; then
        mv -f $merged "$1"
        echo "$1"
    else
        find . -type f | sort | xargs cat
    fi
    rm -rf $decoded $merged
}


print-help () {
    local this=$(basename $0)
    cat << HELP
 qed - encode data into a tar stream of QR Code images

 Usage: $this [-hdpqzv] [-o output] [-V version] [-l error-correction-level] [-r framerate]
            [-s cell-size] [-m margin] [-1 qr-fg-color] [-0 qr-bg-color] filepath

      -h    print this message
      -d    decode input
      -p    create QR Code slideshow (mp4) after encoding is finished
      -q    create QR Code quick-view (HTML document) after encoding is finished
      -v    show in detail how the work is progressing
      -r    set QR code slideshow framerate  (default: $SLIDE_SHOW_FRAMERATE)
      -o    set output filepath              (default: '-' for stdout)
      -s    set cell size of QR Code         (default: $QR_CELL_SIZE)
      -m    set margin of QR Code            (recommended 4+,   default: $QR_MARGIN)
      -V    set version of QR Code           (1 to 40,          default: $QR_VERSION)
      -l    set error correction level       (one of [L,M,Q,H], default: $QR_ERROR_CORRECTION)
      -1    set foreground color of QR Code  (6-hexadecimal,    default: $QR_FOREGROUND)
      -0    set background color of QR Code  (6-hexadecimal,    default: $QR_BACKGROUND)
HELP
    exit 0
}



# --------------
# qed main
# --------------
# parsing arguments
while getopts hdpqvo:s:m:1:0:V:l:r: flag
do
    case "$flag" in
        h) print-help;;
        d) decode=${OPTARG:-set};;
        p) slideshow=${OPTARG:-set};;
        q) view=${OPTARG:-set};;
        v) verbose=${OPTARG:-set};;
        o) out=${OPTARG};;
        s) size=${OPTARG};;
        m) margin=${OPTARG};;
        1) fcolor=${OPTARG};;
        0) bcolor=${OPTARG};;
        V) version=${OPTARG};;
        l) level=${OPTARG};;
        r) framerate=${OPTARG};;
    esac
done
shift $((OPTIND - 1))


# set fallbacks
size=${size:-$QR_CELL_SIZE}
margin=${margin:-$QR_MARGIN}
fcolor=${fcolor:-$QR_FOREGROUND}
bcolor=${bcolor:-$QR_BACKGROUND}
version=${version:-$QR_VERSION}
level=${level:-$QR_ERROR_CORRECTION}
framerate=${framerate:-$SLIDE_SHOW_FRAMERATE}
[[ "$out" == "-" ]] && out=


# when decoding:
if [[ -n $decode ]]; then
    in="$(tmp-filepath)"
    assert-dir "$in"

    # prepare input
    if [[ -p /dev/stdin || $# -eq 0 ]]; then    # input from stdin
        cat - | tar -x -C "$in" &>/dev/null \
            || error "given an unacceptable input: must be a tar-stream"

    else    # input from arguments
        f=$(abspath $1)
        [[ -e "$f" ]] || error "filepath not found: $f"
        if [ -d "$f" ]; then    # arg: directory
            get-images-from-dir "$f" | xargs -I{} cp -f "{}" $in
        else    # arg: file (tarball | image | video)
            if [[ $(check-if-video $f) ]]; then
                in=$(video-to-images $f) \
                    || error "failed to convert QR slideshow video: $f"
            else
                tar -tf $f &>/dev/null     \
                    && tar -xf $f -C "$in" \
                    || cp -f "$f" $in
            fi
        fi
    fi

    # check if there's anything to decode
    [[ $(get-images-from-dir $in | wc -l) -gt 0 ]] \
        || error "nothing to decode: $1" \
                 "\n\t must be a tarball or filepath containing images"


    # prepare output name (if any). stdout by default
    [[ -n "$out" ]] && out=$(ask-for-deletion $out)

    decode "$out" "$in"


# when encoding:
else
    # when used with stdin
    if [[ -p /dev/stdin || $# -eq 0 ]]; then
        f="$(tmp-filepath)"
        cat - > $f

    # when used with arguments
    else
        f="$1"
        [[ -e "$f" ]] || error "filepath not found: $f"
    fi

    # prepare output name (if any). stdout by default
    [[ -n "$out" ]] && out=$(ask-for-deletion $out)

    # prepare input file to encode
    in="$(tmp-filepath)"
    cd $(dirname $f) && tar -c $(basename $f) | gzip -c1 > $in \
        || error "occurred problem while archiving file: $f"

    encode "$out"      \
           "$in"       \
           "$size"     \
           "$margin"   \
           "$version"  \
           "$level"    \
           "$fcolor"   \
           "$bcolor"
    rm -f $in
fi

exit 0
# q.e.d.

__QR_MAX_BYTES_DEF__
H4sICObg+2IAA3FyLW1heC1kYXRhACWUy5XlIBBD9y8aqgowEIEX44Uj6PyzGF15xW2h80yrPi3+/p24fi3+nhOd8z0RnPeRnLqu5HxOTs73ZOO8bS/dj+J8Tk/O1/7Sfeq+6/5anM+ZyfmePjnvU7offL5N4DnLwntm47xP198TQxmezznluCzcZ+inLxyjA3JkAu9Zk/M+UxcLx05AjmHQf9kWcPuzW5asBsiyDLJ8yn32+kXDcgWgLKIAWYYVpRH7F+G4ApBnGOS5LkCeEjjSaZBnGQi1AHnG+AWx9jQ8pyoAebrh/n6QaLsCCLIthRuEm58iz+6/IN6hegXx9khAnm1Qhbgi4aG4goT7sEIRE5AHhYynyhFkPJpBnmmQR4EFKV+xAHmmFXl4BilXSCHmi69v90MH1BDdijy1fknOaxjkmROQZyUgD0DOOzfw6KMBvHqYFTWOwsx0a30k07UBmeYAZCopZdMOSA04LkAdGFZkmgKSjrhMz9lhkOm7UxeiuJPzKkimfQHq1BiATCX4ulnFz6+dx4bkUqukG3rrB9zRnXe6pSNN6ulmUFOjuKtHLgjXbhCdb0kuQiTxmGliPFSyJPPdLMml3q7mLaDBLUJXmzZIrmVJq0AlKu+K1RvEthjWmKSyJpseUQ5+c5meNxW10mslrDFxAqLPpscW0fuNVbZ9mmw8jfAzlkm2S31ZpK9Jt6bh1P9Z4xvggjzBG8K2rDHDAgqQXQNVLgC1rOlJH6aboogoQY5ZEL61Ifl6WsOnUhVFyLk3pGluH+H7iL2gPivvFz+KMiTro7xhxmVNvtQC6V4yWxu1e8sw+t1rZk5r99dj/wGs8WlBtwUAAA==
